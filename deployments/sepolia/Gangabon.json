{
  "address": "0x35a61042ED904330D972911EA94DFfB0F72d611F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadlinePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_passAmountNeeded",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ApplicationCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "company",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ApplicationRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Gangabon.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applicationId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applicationIdMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applications",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "company",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nay",
          "type": "uint256"
        },
        {
          "internalType": "enum Gangabon.State",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_companyName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_voteRequired",
          "type": "uint256"
        }
      ],
      "name": "createApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadlinePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "passAmountNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadlinePeriod",
          "type": "uint256"
        }
      ],
      "name": "setDeadlinePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_passAmountNeeded",
          "type": "uint256"
        }
      ],
      "name": "setPassAmountNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToCid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_applicationId",
          "type": "uint256"
        },
        {
          "internalType": "enum Gangabon.Vote",
          "name": "_vote",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x771eb93c12cafd81264231c7298ea7a7f63a778df7038e5c1263af0f960e9574",
  "receipt": {
    "to": null,
    "from": "0x6fCA2C4E52b1fECBDdFa0FFc5eE060ff2c3b062f",
    "contractAddress": "0x35a61042ED904330D972911EA94DFfB0F72d611F",
    "transactionIndex": 5,
    "gasUsed": "2485180",
    "logsBloom": "0x00000000010000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000001000000000000000000000000000000000000020000000000000020000800000000000000000000000000000000400000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000820010000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbd760d6ac70198d51a56a3e282fedaa230f1269b71d9409bb7258d0487ea43fa",
    "transactionHash": "0x771eb93c12cafd81264231c7298ea7a7f63a778df7038e5c1263af0f960e9574",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 3644637,
        "transactionHash": "0x771eb93c12cafd81264231c7298ea7a7f63a778df7038e5c1263af0f960e9574",
        "address": "0x35a61042ED904330D972911EA94DFfB0F72d611F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fca2c4e52b1fecbddfa0ffc5ee060ff2c3b062f"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xbd760d6ac70198d51a56a3e282fedaa230f1269b71d9409bb7258d0487ea43fa"
      }
    ],
    "blockNumber": 3644637,
    "cumulativeGasUsed": "2738232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10000,
    2,
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "1d1170106f8d596d7b3d3bb0e2a51094",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadlinePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_passAmountNeeded\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ApplicationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ApplicationRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Gangabon.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applicationId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applicationIdMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nay\",\"type\":\"uint256\"},{\"internalType\":\"enum Gangabon.State\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_voteRequired\",\"type\":\"uint256\"}],\"name\":\"createApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlinePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passAmountNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadlinePeriod\",\"type\":\"uint256\"}],\"name\":\"setDeadlinePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passAmountNeeded\",\"type\":\"uint256\"}],\"name\":\"setPassAmountNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_applicationId\",\"type\":\"uint256\"},{\"internalType\":\"enum Gangabon.Vote\",\"name\":\"_vote\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gangabon.sol\":\"Gangabon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Gangabon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\ncontract Gangabon is ERC1155, ReentrancyGuard, AutomationCompatible, Pausable, Ownable {\\n\\tstruct Application {\\n\\t\\tuint id;\\n\\t\\taddress owner;\\n\\t\\tstring cid;\\n\\t\\tstring company;\\n\\t\\tuint deadline;\\n\\t\\tuint totalVote;\\n\\t\\tuint yay;\\n\\t\\tuint nay;\\n\\t\\tState status;\\n\\t}\\n\\n\\tenum Vote {\\n\\t\\tyay,\\n\\t\\tnay\\n\\t}\\n\\n\\tenum State {\\n\\t\\tVoting,\\n\\t\\tRejected,\\n\\t\\tCompleted\\n\\t}\\n\\n\\tmapping(address => mapping(uint => bool)) public addressVoted;\\n\\tuint public deadlinePeriod;\\n\\tuint public passAmountNeeded;\\n\\n\\tmapping(uint => Application) public applications;\\n\\tmapping(uint => string) public tokenIdToCid;\\n\\n\\tuint public applicationId;\\n\\tbool public isMintReady;\\n\\tuint public applicationIdMinting;\\n\\tuint public tokenId;\\n\\n\\tevent ApplicationCreated(address indexed owner, string company, uint id, string cid);\\n\\tevent Voted(address indexed owner, uint id, Vote vote);\\n\\tevent ApplicationCompleted(address indexed owner, uint id);\\n\\tevent ApplicationRejected(address indexed owner, uint id);\\n\\n\\tconstructor(uint _deadlinePeriod, uint _passAmountNeeded, string memory _uri) ERC1155(_uri) {\\n\\t\\tdeadlinePeriod = _deadlinePeriod;\\n\\t\\tpassAmountNeeded = _passAmountNeeded;\\n\\t\\tapplicationId = 0;\\n\\t\\tisMintReady = false;\\n\\t\\ttokenId = 0;\\n\\t}\\n\\n\\tfunction createApplication(string memory _cid, string memory _companyName, uint _voteRequired) external nonReentrant whenNotPaused {\\n\\t\\tapplications[applicationId] = Application({\\n\\t\\t\\tid: applicationId,\\n\\t\\t\\towner: msg.sender,\\n\\t\\t\\tcid: _cid,\\n\\t\\t\\tcompany: _companyName,\\n\\t\\t\\tdeadline: block.number + deadlinePeriod,\\n\\t\\t\\ttotalVote: _voteRequired,\\n\\t\\t\\tyay: 0,\\n\\t\\t\\tnay: 0,\\n\\t\\t\\tstatus: State.Voting\\n\\t\\t});\\n\\n\\t\\tapplicationId++;\\n\\n\\t\\temit ApplicationCreated(msg.sender, _companyName, applicationId, _cid);\\n\\t}\\n\\n\\tfunction vote(uint _applicationId, Vote _vote) external nonReentrant whenNotPaused {\\n\\t\\trequire(_applicationId < applicationId, \\\"No application id\\\");\\n\\t\\trequire(!addressVoted[msg.sender][_applicationId], \\\"Already Vote\\\");\\n\\t\\trequire(block.number < applications[_applicationId].deadline, \\\"Deadline reached\\\");\\n\\t\\trequire(applications[_applicationId].status == State.Voting, \\\"Application is not in voting state\\\");\\n\\t\\t\\n\\t\\taddressVoted[msg.sender][_applicationId] = true;\\n\\t\\tApplication storage application = applications[_applicationId];\\n\\n\\t\\tapplication.totalVote +=1;\\n\\n\\t\\temit Voted(msg.sender, _applicationId, _vote);\\n\\t\\t\\n\\t\\tif(_vote == Vote.yay) {\\n\\t\\t\\tapplication.yay += 1;\\n\\n\\t\\t\\tif(application.yay >= passAmountNeeded) {\\n\\t\\t\\t\\tisMintReady = true;\\n\\t\\t\\t\\tapplicationIdMinting = application.id;\\n\\t\\t\\t\\tapplications[_applicationId].status = State.Completed;\\n\\t\\t\\t\\temit ApplicationCompleted(application.owner, _applicationId);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tapplication.nay +=1;\\n\\t\\t\\tif(application.nay >= passAmountNeeded) {\\n\\t\\t\\t\\tapplications[_applicationId].status = State.Rejected;\\n\\t\\t\\t\\temit ApplicationRejected(application.owner, _applicationId);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction checkUpkeep(\\n    bytes calldata /* checkData */\\n  )\\n    external\\n    view\\n    override\\n    returns (bool upkeepNeeded, bytes memory /*_performData*/ ) {\\n\\t\\tupkeepNeeded = isMintReady;\\n  }\\n\\n  function performUpkeep(bytes calldata /* performData */) external override {\\n\\t\\tif(isMintReady) {\\n\\t\\t\\tApplication storage application = applications[applicationIdMinting];\\n\\t\\t\\t_mint(application.owner, tokenId, 100, \\\"\\\");\\n\\t\\t\\ttokenId++;\\n\\t\\t\\tisMintReady = false;\\n\\t\\t\\tapplicationIdMinting = 0;\\n\\t\\t\\ttokenIdToCid[tokenId] = application.cid;\\n\\t\\t}\\n\\t}\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n\\t}\\n\\n\\tfunction setDeadlinePeriod(uint _deadlinePeriod) external onlyOwner {\\n\\t\\tdeadlinePeriod = _deadlinePeriod;\\n\\t}\\n\\n\\tfunction setPassAmountNeeded(uint _passAmountNeeded) external onlyOwner {\\n\\t\\tpassAmountNeeded = _passAmountNeeded;\\n\\t}\\n\\n}\",\"keccak256\":\"0x2ccc3e50ca0239066d9ecf9ec63eab9dd7e1043a514d3bcfbfa147f0c63afeb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e4638038062002e46833981016040819052620000349162000224565b8062000040816200007f565b5060016003556004805460ff191690556200005b3362000091565b506006919091556007556000600a819055600b805460ff19169055600d556200045c565b60026200008d82826200038c565b5050565b600480546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80515b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001325762000132620000f4565b6040525050565b60006200014560405190565b90506200015382826200010a565b919050565b60006001600160401b03821115620001745762000174620000f4565b601f19601f83011660200192915050565b60005b83811015620001a257818101518382015260200162000188565b50506000910152565b6000620001c2620001bc8462000158565b62000139565b905082815260208101848484011115620001df57620001df600080fd5b620001ec84828562000185565b509392505050565b600082601f8301126200020a576200020a600080fd5b81516200021c848260208601620001ab565b949350505050565b6000806000606084860312156200023e576200023e600080fd5b60006200024c8686620000eb565b93505060206200025f86828701620000eb565b92505060408401516001600160401b03811115620002805762000280600080fd5b6200028e86828701620001f4565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002c357607f821691505b602082108103620002d857620002d862000298565b50919050565b6000620000ee620002ec8381565b90565b620002fa83620002de565b815460001960089490940293841b1916921b91909117905550565b600062000324818484620002ef565b505050565b818110156200008d576200033f60008262000315565b60010162000329565b601f82111562000324576000818152602090206020601f85010481016020851015620003715750805b620003856020601f86010483018262000329565b5050505050565b81516001600160401b03811115620003a857620003a8620000f4565b620003b48254620002ae565b620003c182828562000348565b6020601f831160018114620003f85760008415620003df5750858201515b600019600886021c198116600286021786555062000454565b600085815260208120601f198616915b828110156200042a578885015182556020948501946001909201910162000408565b86831015620004475784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b6129da806200046c6000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80636e04ff0d11610104578063943e8216116100a2578063e985e9c511610071578063e985e9c5146103de578063f242432a1461041a578063f2fde38b1461042d578063f979b8761461044057600080fd5b8063943e821614610362578063a22cb46514610375578063a70dedc814610388578063dfefadff146103b657600080fd5b806382651c0d116100de57806382651c0d146103205780638456cb59146103335780638ad104191461033b5780638da5cb5b1461034457600080fd5b80636e04ff0d146102e55780636f9ae06e1461030f578063715018a61461031857600080fd5b8063341a3c02116101715780634b2ee8a41161014b5780634b2ee8a4146102a45780634e1273f4146102b15780635c975abb146102d15780636db24262146102dc57600080fd5b8063341a3c02146102765780633f4ba83a146102895780634585e33b1461029157600080fd5b806317d70f7c116101ad57806317d70f7c1461023c5780631934bc14146102455780632eb2c2d61461024e578063327bf5141461026357600080fd5b8062fdd58e146101d357806301ffc9a7146101fc5780630e89341c1461021c575b600080fd5b6101e66101e13660046116bb565b610453565b6040516101f39190611700565b60405180910390f35b61020f61020a366004611729565b6104ad565b6040516101f3919061175a565b61022f61022a366004611768565b6104fd565b6040516101f391906117df565b6101e6600d5481565b6101e660075481565b61026161025c36600461198a565b610591565b005b610261610271366004611768565b6105dd565b61022f610284366004611768565b6105ea565b610261610684565b61026161029f366004611aa1565b610696565b600b5461020f9060ff1681565b6102c46102bf366004611b5d565b61072a565b6040516101f39190611c20565b60045460ff1661020f565b6101e660065481565b6103016102f3366004611aa1565b5050600b5460ff1690606090565b6040516101f3929190611c31565b6101e6600c5481565b610261610811565b61026161032e366004611768565b610823565b610261610830565b6101e6600a5481565b60045461010090046001600160a01b03166040516101f39190611c5a565b610261610370366004611c80565b610840565b610261610383366004611cc6565b610b02565b61020f6103963660046116bb565b600560209081526000928352604080842090915290825290205460ff1681565b6103c96103c4366004611768565b610b0d565b6040516101f399989796959493929190611d3d565b61020f6103ec366004611dd1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610261610428366004611e04565b610c72565b61026161043b366004611e5e565b610cb7565b61026161044e366004611e7f565b610cf1565b60006001600160a01b0383166104845760405162461bcd60e51b815260040161047b90611f4c565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104de57506001600160e01b031982166303a24d0760e21b145b806104a757506301ffc9a760e01b6001600160e01b03198316146104a7565b60606002805461050c90611f72565b80601f016020809104026020016040519081016040528092919081815260200182805461053890611f72565b80156105855780601f1061055a57610100808354040283529160200191610585565b820191906000526020600020905b81548152906001019060200180831161056857829003601f168201915b50505050509050919050565b6001600160a01b0385163314806105ad57506105ad85336103ec565b6105c95760405162461bcd60e51b815260040161047b90611fe9565b6105d68585858585610e89565b5050505050565b6105e5611025565b600755565b6009602052600090815260409020805461060390611f72565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90611f72565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050505081565b61068c611025565b610694611055565b565b600b5460ff161561072657600c5460009081526008602090815260408083206001810154600d548351948501909352938352926106e2926001600160a01b0390911691906064906110a1565b600d80549060006106f28361200f565b9091555050600b805460ff191690556000600c819055600d54815260096020526040902061072360028301826120c8565b50505b5050565b6060815183511461074d5760405162461bcd60e51b815260040161047b906121f0565b600083516001600160401b03811115610768576107686117f7565b604051908082528060200260200182016040528015610791578160200160208202803683370190505b50905060005b8451811015610809576107dc8582815181106107b5576107b5612200565b60200260200101518583815181106107cf576107cf612200565b6020026020010151610453565b8282815181106107ee576107ee612200565b60209081029190910101526108028161200f565b9050610797565b509392505050565b610819611025565b6106946000611189565b61082b611025565b600655565b610838611025565b6106946111e3565b610848611220565b610850611249565b600a5482106108715760405162461bcd60e51b815260040161047b90612241565b33600090815260056020908152604080832085845290915290205460ff16156108ac5760405162461bcd60e51b815260040161047b90612274565b60008281526008602052604090206004015443106108dc5760405162461bcd60e51b815260040161047b906122ab565b60008281526008602081905260408220015460ff16600281111561090257610902611cf9565b1461091f5760405162461bcd60e51b815260040161047b906122fa565b3360009081526005602081815260408084208685528252808420805460ff191660019081179091556008909252832091820180549293919290919061096590849061230a565b909155505060405133907fcc66c27f993ef125e1b985d84a52726edc66dcc64e94d172f80253e37d5263729061099e908690869061234b565b60405180910390a260008260018111156109ba576109ba611cf9565b03610a685760018160060160008282546109d4919061230a565b9091555050600754600682015410610a6357600b805460ff1990811660019081179092558254600c556000858152600860208190526040918290200180549092166002179091559082015490516001600160a01b03909116907feee7310c3b2d62d1dff6b1880b8f6d0a80d484d593668a7cb993210e4b4ddaed90610a5a908690611700565b60405180910390a25b610af7565b6001816007016000828254610a7d919061230a565b9091555050600780549082015410610af75760008381526008602081905260409182902001805460ff1916600190811790915582015490516001600160a01b03909116907f178c4297d9f988537685e87d1e02ec1c569bfdbefa46251af88ca3b560f6d12a90610aee908690611700565b60405180910390a25b506107266001600355565b61072633838361126c565b60086020526000908152604090208054600182015460028301805492936001600160a01b0390921692610b3f90611f72565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90611f72565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b505050505090806003018054610bcd90611f72565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf990611f72565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050600484015460058501546006860154600787015460089097015495969295919450925060ff1689565b6001600160a01b038516331480610c8e5750610c8e85336103ec565b610caa5760405162461bcd60e51b815260040161047b90611fe9565b6105d6858585858561130e565b610cbf611025565b6001600160a01b038116610ce55760405162461bcd60e51b815260040161047b906123a9565b610cee81611189565b50565b610cf9611220565b610d01611249565b604051806101200160405280600a548152602001336001600160a01b0316815260200184815260200183815260200160065443610d3e919061230a565b8152602001828152602001600081526020016000815260200160006002811115610d6a57610d6a611cf9565b9052600a5460009081526008602090815260409182902083518155908301516001820180546001600160a01b0319166001600160a01b03909216919091179055908201516002820190610dbd90826123b9565b5060608201516003820190610dd290826123b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff19166001836002811115610e1f57610e1f611cf9565b021790555050600a805491506000610e368361200f565b9091555050600a5460405133917fea34fcc95d727b91b98cfc00445e7040f45187943e84e8b022ebc03026073da691610e729186918890612466565b60405180910390a2610e846001600355565b505050565b8151835114610eaa5760405162461bcd60e51b815260040161047b906124e6565b6001600160a01b038416610ed05760405162461bcd60e51b815260040161047b90612538565b3360005b8451811015610fb7576000858281518110610ef157610ef1612200565b602002602001015190506000858381518110610f0f57610f0f612200565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610f5f5760405162461bcd60e51b815260040161047b9061258f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610f9c90849061230a565b9250508190555050505080610fb09061200f565b9050610ed4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161100792919061259f565b60405180910390a461101d818787878787611444565b505050505050565b6004546001600160a01b036101009091041633146106945760405162461bcd60e51b815260040161047b906125f6565b61105d611552565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516110979190611c5a565b60405180910390a1565b6001600160a01b0384166110c75760405162461bcd60e51b815260040161047b90612644565b3360006110d385611574565b905060006110e085611574565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061111290849061230a565b92505081905550866001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611169929190612654565b60405180910390a4611180836000898989896115bf565b50505050505050565b600480546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6111eb611249565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861108a3390565b6002600354036112425760405162461bcd60e51b815260040161047b906126a3565b6002600355565b60045460ff16156106945760405162461bcd60e51b815260040161047b906126da565b816001600160a01b0316836001600160a01b03160361129d5760405162461bcd60e51b815260040161047b90612730565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061130190859061175a565b60405180910390a3505050565b6001600160a01b0384166113345760405162461bcd60e51b815260040161047b90612538565b33600061134085611574565b9050600061134d85611574565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113905760405162461bcd60e51b815260040161047b9061258f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113cd90849061230a565b92505081905550876001600160a01b0316896001600160a01b0316856001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611423929190612654565b60405180910390a4611439848a8a8a8a8a6115bf565b505050505050505050565b6001600160a01b0384163b1561101d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906114889089908990889088908890600401612740565b6020604051808303816000875af19250505080156114c3575060408051601f3d908101601f191682019092526114c0918101906127ab565b60015b611522576114cf6127cc565b806308c379a00361150857506114e36127e7565b806114ee575061150a565b8060405162461bcd60e51b815260040161047b91906117df565b505b60405162461bcd60e51b815260040161047b906128bd565b6001600160e01b0319811663bc197c8160e01b146111805760405162461bcd60e51b815260040161047b90612912565b60045460ff166106945760405162461bcd60e51b815260040161047b9061294d565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106115ae576115ae612200565b602090810291909101015292915050565b6001600160a01b0384163b1561101d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611603908990899088908890889060040161295d565b6020604051808303816000875af192505050801561163e575060408051601f3d908101601f1916820190925261163b918101906127ab565b60015b61164a576114cf6127cc565b6001600160e01b0319811663f23a6e6160e01b146111805760405162461bcd60e51b815260040161047b90612912565b60006001600160a01b0382166104a7565b6116948161167a565b8114610cee57600080fd5b80356104a78161168b565b80611694565b80356104a7816116aa565b600080604083850312156116d1576116d1600080fd5b60006116dd858561169f565b92505060206116ee858286016116b0565b9150509250929050565b805b82525050565b602081016104a782846116f8565b6001600160e01b03198116611694565b80356104a78161170e565b60006020828403121561173e5761173e600080fd5b600061174a848461171e565b949350505050565b8015156116fa565b602081016104a78284611752565b60006020828403121561177d5761177d600080fd5b600061174a84846116b0565b60005b838110156117a457818101518382015260200161178c565b50506000910152565b60006117b7825190565b8084526020840193506117ce818560208601611789565b601f01601f19169290920192915050565b602080825281016117f081846117ad565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611832576118326117f7565b6040525050565b600061184460405190565b9050611850828261180d565b919050565b60006001600160401b0382111561186e5761186e6117f7565b5060209081020190565b600061188b61188684611855565b611839565b838152905060208082019084028301858111156118aa576118aa600080fd5b835b818110156118ce57806118bf88826116b0565b845250602092830192016118ac565b5050509392505050565b600082601f8301126118ec576118ec600080fd5b813561174a848260208601611878565b60006001600160401b03821115611915576119156117f7565b601f19601f83011660200192915050565b82818337506000910152565b6000611940611886846118fc565b90508281526020810184848401111561195b5761195b600080fd5b610809848285611926565b600082601f83011261197a5761197a600080fd5b813561174a848260208601611932565b600080600080600060a086880312156119a5576119a5600080fd5b60006119b1888861169f565b95505060206119c28882890161169f565b94505060408601356001600160401b038111156119e1576119e1600080fd5b6119ed888289016118d8565b93505060608601356001600160401b03811115611a0c57611a0c600080fd5b611a18888289016118d8565b92505060808601356001600160401b03811115611a3757611a37600080fd5b611a4388828901611966565b9150509295509295909350565b60008083601f840112611a6557611a65600080fd5b5081356001600160401b03811115611a7f57611a7f600080fd5b602083019150836001820283011115611a9a57611a9a600080fd5b9250929050565b60008060208385031215611ab757611ab7600080fd5b82356001600160401b03811115611ad057611ad0600080fd5b611adc85828601611a50565b92509250509250929050565b6000611af661188684611855565b83815290506020808201908402830185811115611b1557611b15600080fd5b835b818110156118ce5780611b2a888261169f565b84525060209283019201611b17565b600082601f830112611b4d57611b4d600080fd5b813561174a848260208601611ae8565b60008060408385031215611b7357611b73600080fd5b82356001600160401b03811115611b8c57611b8c600080fd5b611b9885828601611b39565b92505060208301356001600160401b03811115611bb757611bb7600080fd5b6116ee858286016118d8565b6000611bcf83836116f8565b505060200190565b6000611be1825190565b80845260209384019383018060005b83811015611c15578151611c048882611bc3565b975060208301925050600101611bf0565b509495945050505050565b602080825281016117f08184611bd7565b60408101611c3f8285611752565b818103602083015261174a81846117ad565b6116fa8161167a565b602081016104a78284611c51565b60028110610cee57600080fd5b80356104a781611c68565b60008060408385031215611c9657611c96600080fd5b6000611ca285856116b0565b92505060206116ee85828601611c75565b801515611694565b80356104a781611cb3565b60008060408385031215611cdc57611cdc600080fd5b6000611ce8858561169f565b92505060206116ee85828601611cbb565b634e487b7160e01b600052602160045260246000fd5b60038110610cee57610cee611cf9565b8061185081611d0f565b60006104a782611d1f565b6116fa81611d29565b6101208101611d4c828c6116f8565b611d59602083018b611c51565b8181036040830152611d6b818a6117ad565b90508181036060830152611d7f81896117ad565b9050611d8e60808301886116f8565b611d9b60a08301876116f8565b611da860c08301866116f8565b611db560e08301856116f8565b611dc3610100830184611d34565b9a9950505050505050505050565b60008060408385031215611de757611de7600080fd5b6000611df3858561169f565b92505060206116ee8582860161169f565b600080600080600060a08688031215611e1f57611e1f600080fd5b6000611e2b888861169f565b9550506020611e3c8882890161169f565b9450506040611e4d888289016116b0565b9350506060611a18888289016116b0565b600060208284031215611e7357611e73600080fd5b600061174a848461169f565b600080600060608486031215611e9757611e97600080fd5b83356001600160401b03811115611eb057611eb0600080fd5b611ebc86828701611966565b93505060208401356001600160401b03811115611edb57611edb600080fd5b611ee786828701611966565b9250506040611ef8868287016116b0565b9150509250925092565b602a81526000602082017f455243313135353a2061646472657373207a65726f206973206e6f742061207681526930b634b21037bbb732b960b11b602082015291505b5060400190565b602080825281016104a781611f02565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611f8657607f821691505b602082108103611f9857611f98611f5c565b50919050565b602e81526000602082017f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e81526d195c881bdc88185c1c1c9bdd995960921b60208201529150611f45565b602080825281016104a781611f9e565b634e487b7160e01b600052601160045260246000fd5b6000600019820361202257612022611ff9565b5060010190565b80546104a781611f72565b60006104a76120408381565b90565b61204c83612034565b815460001960089490940293841b1916921b91909117905550565b6000610e84818484612043565b8181101561072657612087600082612067565b600101612074565b601f821115610e84576000818152602090206020601f850104810160208510156120b65750805b6105d66020601f860104830182612074565b8181036120d3575050565b6120dc82612029565b6001600160401b038111156120f3576120f36117f7565b6120fd8254611f72565b61210882828561208f565b6000601f83116001811461213d57600084156121245750858201545b600019600886021c19811660028602175b86555061101d565b600095865260208087208688529087209096601f19861691905b828110156121775788850154825560019485019490910190602001612157565b8683101561219657888501546000196008601f8a16021c1981165b8355505b600160028802018855505050505050505050565b602981526000602082017f455243313135353a206163636f756e747320616e6420696473206c656e677468815268040dad2e6dac2e8c6d60bb1b60208201529150611f45565b602080825281016104a7816121aa565b634e487b7160e01b600052603260045260246000fd5b6011815260006020820170139bc8185c1c1b1a58d85d1a5bdb881a59607a1b815291505b5060200190565b602080825281016104a781612216565b600c81526000602082016b416c726561647920566f746560a01b8152915061223a565b602080825281016104a781612251565b601081526000602082016f111958591b1a5b99481c995858da195960821b8152915061223a565b602080825281016104a781612284565b602281526000602082017f4170706c69636174696f6e206973206e6f7420696e20766f74696e6720737461815261746560f01b60208201529150611f45565b602080825281016104a7816122bb565b808201808211156104a7576104a7611ff9565b60028110610cee57610cee611cf9565b806118508161231d565b60006104a78261232d565b6116fa81612337565b6040810161235982856116f8565b6117f06020830184612342565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611f45565b602080825281016104a781612366565b81516001600160401b038111156123d2576123d26117f7565b6123dc8254611f72565b6123e782828561208f565b6020601f8311600181146124175760008415612124575081860151600019600886021c1981166002860217612135565b600085815260208120601f198616915b828110156124475788850151825560209485019460019092019101612427565b8683101561219657888501516000196008601f8a16021c198116612192565b6060808252810161247781866117ad565b905061248660208301856116f8565b818103604083015261249881846117ad565b95945050505050565b602881526000602082017f455243313135353a2069647320616e6420616d6f756e7473206c656e677468208152670dad2e6dac2e8c6d60c31b60208201529150611f45565b602080825281016104a7816124a1565b602581526000602082017f455243313135353a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b60208201529150611f45565b602080825281016104a7816124f6565b602a81526000602082017f455243313135353a20696e73756666696369656e742062616c616e636520666f81526939103a3930b739b332b960b11b60208201529150611f45565b602080825281016104a781612548565b604080825281016125b08185611bd7565b9050818103602083015261174a8184611bd7565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061223a565b602080825281016104a7816125c4565b602181526000602082017f455243313135353a206d696e7420746f20746865207a65726f206164647265738152607360f81b60208201529150611f45565b602080825281016104a781612606565b6040810161266282856116f8565b6117f060208301846116f8565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152915061223a565b602080825281016104a78161266f565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152915061223a565b602080825281016104a7816126b3565b602981526000602082017f455243313135353a2073657474696e6720617070726f76616c20737461747573815268103337b91039b2b63360b91b60208201529150611f45565b602080825281016104a7816126ea565b60a0810161274e8288611c51565b61275b6020830187611c51565b818103604083015261276d8186611bd7565b905081810360608301526127818185611bd7565b9050818103608083015261279581846117ad565b979650505050505050565b80516104a78161170e565b6000602082840312156127c0576127c0600080fd5b600061174a84846127a0565b600060033d11156120405760046000803e5060005160e01c90565b600060443d10156127f55790565b60405160043d036004823e80513d60248201116001600160401b038211171561281d57505090565b80820180516001600160401b03811115612838575050505090565b80602083010160043d03850181111561285357505050505090565b6128628260200185018661180d565b5090949350505050565b603481526000602082017f455243313135353a207472616e7366657220746f206e6f6e2d455243313135358152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60208201529150611f45565b602080825281016104a78161286c565b602881526000602082017f455243313135353a204552433131353552656365697665722072656a656374658152676420746f6b656e7360c01b60208201529150611f45565b602080825281016104a7816128cd565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b8152915061223a565b602080825281016104a781612922565b60a0810161296b8288611c51565b6129786020830187611c51565b61298560408301866116f8565b61299260608301856116f8565b818103608083015261279581846117ad56fea264697066735822122099291cffc4cfb0cc0404b39ea937e21b8f3aa048725108215a8f43866020719164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c80636e04ff0d11610104578063943e8216116100a2578063e985e9c511610071578063e985e9c5146103de578063f242432a1461041a578063f2fde38b1461042d578063f979b8761461044057600080fd5b8063943e821614610362578063a22cb46514610375578063a70dedc814610388578063dfefadff146103b657600080fd5b806382651c0d116100de57806382651c0d146103205780638456cb59146103335780638ad104191461033b5780638da5cb5b1461034457600080fd5b80636e04ff0d146102e55780636f9ae06e1461030f578063715018a61461031857600080fd5b8063341a3c02116101715780634b2ee8a41161014b5780634b2ee8a4146102a45780634e1273f4146102b15780635c975abb146102d15780636db24262146102dc57600080fd5b8063341a3c02146102765780633f4ba83a146102895780634585e33b1461029157600080fd5b806317d70f7c116101ad57806317d70f7c1461023c5780631934bc14146102455780632eb2c2d61461024e578063327bf5141461026357600080fd5b8062fdd58e146101d357806301ffc9a7146101fc5780630e89341c1461021c575b600080fd5b6101e66101e13660046116bb565b610453565b6040516101f39190611700565b60405180910390f35b61020f61020a366004611729565b6104ad565b6040516101f3919061175a565b61022f61022a366004611768565b6104fd565b6040516101f391906117df565b6101e6600d5481565b6101e660075481565b61026161025c36600461198a565b610591565b005b610261610271366004611768565b6105dd565b61022f610284366004611768565b6105ea565b610261610684565b61026161029f366004611aa1565b610696565b600b5461020f9060ff1681565b6102c46102bf366004611b5d565b61072a565b6040516101f39190611c20565b60045460ff1661020f565b6101e660065481565b6103016102f3366004611aa1565b5050600b5460ff1690606090565b6040516101f3929190611c31565b6101e6600c5481565b610261610811565b61026161032e366004611768565b610823565b610261610830565b6101e6600a5481565b60045461010090046001600160a01b03166040516101f39190611c5a565b610261610370366004611c80565b610840565b610261610383366004611cc6565b610b02565b61020f6103963660046116bb565b600560209081526000928352604080842090915290825290205460ff1681565b6103c96103c4366004611768565b610b0d565b6040516101f399989796959493929190611d3d565b61020f6103ec366004611dd1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610261610428366004611e04565b610c72565b61026161043b366004611e5e565b610cb7565b61026161044e366004611e7f565b610cf1565b60006001600160a01b0383166104845760405162461bcd60e51b815260040161047b90611f4c565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104de57506001600160e01b031982166303a24d0760e21b145b806104a757506301ffc9a760e01b6001600160e01b03198316146104a7565b60606002805461050c90611f72565b80601f016020809104026020016040519081016040528092919081815260200182805461053890611f72565b80156105855780601f1061055a57610100808354040283529160200191610585565b820191906000526020600020905b81548152906001019060200180831161056857829003601f168201915b50505050509050919050565b6001600160a01b0385163314806105ad57506105ad85336103ec565b6105c95760405162461bcd60e51b815260040161047b90611fe9565b6105d68585858585610e89565b5050505050565b6105e5611025565b600755565b6009602052600090815260409020805461060390611f72565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90611f72565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050505081565b61068c611025565b610694611055565b565b600b5460ff161561072657600c5460009081526008602090815260408083206001810154600d548351948501909352938352926106e2926001600160a01b0390911691906064906110a1565b600d80549060006106f28361200f565b9091555050600b805460ff191690556000600c819055600d54815260096020526040902061072360028301826120c8565b50505b5050565b6060815183511461074d5760405162461bcd60e51b815260040161047b906121f0565b600083516001600160401b03811115610768576107686117f7565b604051908082528060200260200182016040528015610791578160200160208202803683370190505b50905060005b8451811015610809576107dc8582815181106107b5576107b5612200565b60200260200101518583815181106107cf576107cf612200565b6020026020010151610453565b8282815181106107ee576107ee612200565b60209081029190910101526108028161200f565b9050610797565b509392505050565b610819611025565b6106946000611189565b61082b611025565b600655565b610838611025565b6106946111e3565b610848611220565b610850611249565b600a5482106108715760405162461bcd60e51b815260040161047b90612241565b33600090815260056020908152604080832085845290915290205460ff16156108ac5760405162461bcd60e51b815260040161047b90612274565b60008281526008602052604090206004015443106108dc5760405162461bcd60e51b815260040161047b906122ab565b60008281526008602081905260408220015460ff16600281111561090257610902611cf9565b1461091f5760405162461bcd60e51b815260040161047b906122fa565b3360009081526005602081815260408084208685528252808420805460ff191660019081179091556008909252832091820180549293919290919061096590849061230a565b909155505060405133907fcc66c27f993ef125e1b985d84a52726edc66dcc64e94d172f80253e37d5263729061099e908690869061234b565b60405180910390a260008260018111156109ba576109ba611cf9565b03610a685760018160060160008282546109d4919061230a565b9091555050600754600682015410610a6357600b805460ff1990811660019081179092558254600c556000858152600860208190526040918290200180549092166002179091559082015490516001600160a01b03909116907feee7310c3b2d62d1dff6b1880b8f6d0a80d484d593668a7cb993210e4b4ddaed90610a5a908690611700565b60405180910390a25b610af7565b6001816007016000828254610a7d919061230a565b9091555050600780549082015410610af75760008381526008602081905260409182902001805460ff1916600190811790915582015490516001600160a01b03909116907f178c4297d9f988537685e87d1e02ec1c569bfdbefa46251af88ca3b560f6d12a90610aee908690611700565b60405180910390a25b506107266001600355565b61072633838361126c565b60086020526000908152604090208054600182015460028301805492936001600160a01b0390921692610b3f90611f72565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90611f72565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b505050505090806003018054610bcd90611f72565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf990611f72565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050600484015460058501546006860154600787015460089097015495969295919450925060ff1689565b6001600160a01b038516331480610c8e5750610c8e85336103ec565b610caa5760405162461bcd60e51b815260040161047b90611fe9565b6105d6858585858561130e565b610cbf611025565b6001600160a01b038116610ce55760405162461bcd60e51b815260040161047b906123a9565b610cee81611189565b50565b610cf9611220565b610d01611249565b604051806101200160405280600a548152602001336001600160a01b0316815260200184815260200183815260200160065443610d3e919061230a565b8152602001828152602001600081526020016000815260200160006002811115610d6a57610d6a611cf9565b9052600a5460009081526008602090815260409182902083518155908301516001820180546001600160a01b0319166001600160a01b03909216919091179055908201516002820190610dbd90826123b9565b5060608201516003820190610dd290826123b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201805460ff19166001836002811115610e1f57610e1f611cf9565b021790555050600a805491506000610e368361200f565b9091555050600a5460405133917fea34fcc95d727b91b98cfc00445e7040f45187943e84e8b022ebc03026073da691610e729186918890612466565b60405180910390a2610e846001600355565b505050565b8151835114610eaa5760405162461bcd60e51b815260040161047b906124e6565b6001600160a01b038416610ed05760405162461bcd60e51b815260040161047b90612538565b3360005b8451811015610fb7576000858281518110610ef157610ef1612200565b602002602001015190506000858381518110610f0f57610f0f612200565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610f5f5760405162461bcd60e51b815260040161047b9061258f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610f9c90849061230a565b9250508190555050505080610fb09061200f565b9050610ed4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161100792919061259f565b60405180910390a461101d818787878787611444565b505050505050565b6004546001600160a01b036101009091041633146106945760405162461bcd60e51b815260040161047b906125f6565b61105d611552565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516110979190611c5a565b60405180910390a1565b6001600160a01b0384166110c75760405162461bcd60e51b815260040161047b90612644565b3360006110d385611574565b905060006110e085611574565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061111290849061230a565b92505081905550866001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611169929190612654565b60405180910390a4611180836000898989896115bf565b50505050505050565b600480546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6111eb611249565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861108a3390565b6002600354036112425760405162461bcd60e51b815260040161047b906126a3565b6002600355565b60045460ff16156106945760405162461bcd60e51b815260040161047b906126da565b816001600160a01b0316836001600160a01b03160361129d5760405162461bcd60e51b815260040161047b90612730565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061130190859061175a565b60405180910390a3505050565b6001600160a01b0384166113345760405162461bcd60e51b815260040161047b90612538565b33600061134085611574565b9050600061134d85611574565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113905760405162461bcd60e51b815260040161047b9061258f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113cd90849061230a565b92505081905550876001600160a01b0316896001600160a01b0316856001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611423929190612654565b60405180910390a4611439848a8a8a8a8a6115bf565b505050505050505050565b6001600160a01b0384163b1561101d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906114889089908990889088908890600401612740565b6020604051808303816000875af19250505080156114c3575060408051601f3d908101601f191682019092526114c0918101906127ab565b60015b611522576114cf6127cc565b806308c379a00361150857506114e36127e7565b806114ee575061150a565b8060405162461bcd60e51b815260040161047b91906117df565b505b60405162461bcd60e51b815260040161047b906128bd565b6001600160e01b0319811663bc197c8160e01b146111805760405162461bcd60e51b815260040161047b90612912565b60045460ff166106945760405162461bcd60e51b815260040161047b9061294d565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106115ae576115ae612200565b602090810291909101015292915050565b6001600160a01b0384163b1561101d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611603908990899088908890889060040161295d565b6020604051808303816000875af192505050801561163e575060408051601f3d908101601f1916820190925261163b918101906127ab565b60015b61164a576114cf6127cc565b6001600160e01b0319811663f23a6e6160e01b146111805760405162461bcd60e51b815260040161047b90612912565b60006001600160a01b0382166104a7565b6116948161167a565b8114610cee57600080fd5b80356104a78161168b565b80611694565b80356104a7816116aa565b600080604083850312156116d1576116d1600080fd5b60006116dd858561169f565b92505060206116ee858286016116b0565b9150509250929050565b805b82525050565b602081016104a782846116f8565b6001600160e01b03198116611694565b80356104a78161170e565b60006020828403121561173e5761173e600080fd5b600061174a848461171e565b949350505050565b8015156116fa565b602081016104a78284611752565b60006020828403121561177d5761177d600080fd5b600061174a84846116b0565b60005b838110156117a457818101518382015260200161178c565b50506000910152565b60006117b7825190565b8084526020840193506117ce818560208601611789565b601f01601f19169290920192915050565b602080825281016117f081846117ad565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611832576118326117f7565b6040525050565b600061184460405190565b9050611850828261180d565b919050565b60006001600160401b0382111561186e5761186e6117f7565b5060209081020190565b600061188b61188684611855565b611839565b838152905060208082019084028301858111156118aa576118aa600080fd5b835b818110156118ce57806118bf88826116b0565b845250602092830192016118ac565b5050509392505050565b600082601f8301126118ec576118ec600080fd5b813561174a848260208601611878565b60006001600160401b03821115611915576119156117f7565b601f19601f83011660200192915050565b82818337506000910152565b6000611940611886846118fc565b90508281526020810184848401111561195b5761195b600080fd5b610809848285611926565b600082601f83011261197a5761197a600080fd5b813561174a848260208601611932565b600080600080600060a086880312156119a5576119a5600080fd5b60006119b1888861169f565b95505060206119c28882890161169f565b94505060408601356001600160401b038111156119e1576119e1600080fd5b6119ed888289016118d8565b93505060608601356001600160401b03811115611a0c57611a0c600080fd5b611a18888289016118d8565b92505060808601356001600160401b03811115611a3757611a37600080fd5b611a4388828901611966565b9150509295509295909350565b60008083601f840112611a6557611a65600080fd5b5081356001600160401b03811115611a7f57611a7f600080fd5b602083019150836001820283011115611a9a57611a9a600080fd5b9250929050565b60008060208385031215611ab757611ab7600080fd5b82356001600160401b03811115611ad057611ad0600080fd5b611adc85828601611a50565b92509250509250929050565b6000611af661188684611855565b83815290506020808201908402830185811115611b1557611b15600080fd5b835b818110156118ce5780611b2a888261169f565b84525060209283019201611b17565b600082601f830112611b4d57611b4d600080fd5b813561174a848260208601611ae8565b60008060408385031215611b7357611b73600080fd5b82356001600160401b03811115611b8c57611b8c600080fd5b611b9885828601611b39565b92505060208301356001600160401b03811115611bb757611bb7600080fd5b6116ee858286016118d8565b6000611bcf83836116f8565b505060200190565b6000611be1825190565b80845260209384019383018060005b83811015611c15578151611c048882611bc3565b975060208301925050600101611bf0565b509495945050505050565b602080825281016117f08184611bd7565b60408101611c3f8285611752565b818103602083015261174a81846117ad565b6116fa8161167a565b602081016104a78284611c51565b60028110610cee57600080fd5b80356104a781611c68565b60008060408385031215611c9657611c96600080fd5b6000611ca285856116b0565b92505060206116ee85828601611c75565b801515611694565b80356104a781611cb3565b60008060408385031215611cdc57611cdc600080fd5b6000611ce8858561169f565b92505060206116ee85828601611cbb565b634e487b7160e01b600052602160045260246000fd5b60038110610cee57610cee611cf9565b8061185081611d0f565b60006104a782611d1f565b6116fa81611d29565b6101208101611d4c828c6116f8565b611d59602083018b611c51565b8181036040830152611d6b818a6117ad565b90508181036060830152611d7f81896117ad565b9050611d8e60808301886116f8565b611d9b60a08301876116f8565b611da860c08301866116f8565b611db560e08301856116f8565b611dc3610100830184611d34565b9a9950505050505050505050565b60008060408385031215611de757611de7600080fd5b6000611df3858561169f565b92505060206116ee8582860161169f565b600080600080600060a08688031215611e1f57611e1f600080fd5b6000611e2b888861169f565b9550506020611e3c8882890161169f565b9450506040611e4d888289016116b0565b9350506060611a18888289016116b0565b600060208284031215611e7357611e73600080fd5b600061174a848461169f565b600080600060608486031215611e9757611e97600080fd5b83356001600160401b03811115611eb057611eb0600080fd5b611ebc86828701611966565b93505060208401356001600160401b03811115611edb57611edb600080fd5b611ee786828701611966565b9250506040611ef8868287016116b0565b9150509250925092565b602a81526000602082017f455243313135353a2061646472657373207a65726f206973206e6f742061207681526930b634b21037bbb732b960b11b602082015291505b5060400190565b602080825281016104a781611f02565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611f8657607f821691505b602082108103611f9857611f98611f5c565b50919050565b602e81526000602082017f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e81526d195c881bdc88185c1c1c9bdd995960921b60208201529150611f45565b602080825281016104a781611f9e565b634e487b7160e01b600052601160045260246000fd5b6000600019820361202257612022611ff9565b5060010190565b80546104a781611f72565b60006104a76120408381565b90565b61204c83612034565b815460001960089490940293841b1916921b91909117905550565b6000610e84818484612043565b8181101561072657612087600082612067565b600101612074565b601f821115610e84576000818152602090206020601f850104810160208510156120b65750805b6105d66020601f860104830182612074565b8181036120d3575050565b6120dc82612029565b6001600160401b038111156120f3576120f36117f7565b6120fd8254611f72565b61210882828561208f565b6000601f83116001811461213d57600084156121245750858201545b600019600886021c19811660028602175b86555061101d565b600095865260208087208688529087209096601f19861691905b828110156121775788850154825560019485019490910190602001612157565b8683101561219657888501546000196008601f8a16021c1981165b8355505b600160028802018855505050505050505050565b602981526000602082017f455243313135353a206163636f756e747320616e6420696473206c656e677468815268040dad2e6dac2e8c6d60bb1b60208201529150611f45565b602080825281016104a7816121aa565b634e487b7160e01b600052603260045260246000fd5b6011815260006020820170139bc8185c1c1b1a58d85d1a5bdb881a59607a1b815291505b5060200190565b602080825281016104a781612216565b600c81526000602082016b416c726561647920566f746560a01b8152915061223a565b602080825281016104a781612251565b601081526000602082016f111958591b1a5b99481c995858da195960821b8152915061223a565b602080825281016104a781612284565b602281526000602082017f4170706c69636174696f6e206973206e6f7420696e20766f74696e6720737461815261746560f01b60208201529150611f45565b602080825281016104a7816122bb565b808201808211156104a7576104a7611ff9565b60028110610cee57610cee611cf9565b806118508161231d565b60006104a78261232d565b6116fa81612337565b6040810161235982856116f8565b6117f06020830184612342565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611f45565b602080825281016104a781612366565b81516001600160401b038111156123d2576123d26117f7565b6123dc8254611f72565b6123e782828561208f565b6020601f8311600181146124175760008415612124575081860151600019600886021c1981166002860217612135565b600085815260208120601f198616915b828110156124475788850151825560209485019460019092019101612427565b8683101561219657888501516000196008601f8a16021c198116612192565b6060808252810161247781866117ad565b905061248660208301856116f8565b818103604083015261249881846117ad565b95945050505050565b602881526000602082017f455243313135353a2069647320616e6420616d6f756e7473206c656e677468208152670dad2e6dac2e8c6d60c31b60208201529150611f45565b602080825281016104a7816124a1565b602581526000602082017f455243313135353a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b60208201529150611f45565b602080825281016104a7816124f6565b602a81526000602082017f455243313135353a20696e73756666696369656e742062616c616e636520666f81526939103a3930b739b332b960b11b60208201529150611f45565b602080825281016104a781612548565b604080825281016125b08185611bd7565b9050818103602083015261174a8184611bd7565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061223a565b602080825281016104a7816125c4565b602181526000602082017f455243313135353a206d696e7420746f20746865207a65726f206164647265738152607360f81b60208201529150611f45565b602080825281016104a781612606565b6040810161266282856116f8565b6117f060208301846116f8565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152915061223a565b602080825281016104a78161266f565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152915061223a565b602080825281016104a7816126b3565b602981526000602082017f455243313135353a2073657474696e6720617070726f76616c20737461747573815268103337b91039b2b63360b91b60208201529150611f45565b602080825281016104a7816126ea565b60a0810161274e8288611c51565b61275b6020830187611c51565b818103604083015261276d8186611bd7565b905081810360608301526127818185611bd7565b9050818103608083015261279581846117ad565b979650505050505050565b80516104a78161170e565b6000602082840312156127c0576127c0600080fd5b600061174a84846127a0565b600060033d11156120405760046000803e5060005160e01c90565b600060443d10156127f55790565b60405160043d036004823e80513d60248201116001600160401b038211171561281d57505090565b80820180516001600160401b03811115612838575050505090565b80602083010160043d03850181111561285357505050505090565b6128628260200185018661180d565b5090949350505050565b603481526000602082017f455243313135353a207472616e7366657220746f206e6f6e2d455243313135358152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60208201529150611f45565b602080825281016104a78161286c565b602881526000602082017f455243313135353a204552433131353552656365697665722072656a656374658152676420746f6b656e7360c01b60208201529150611f45565b602080825281016104a7816128cd565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b8152915061223a565b602080825281016104a781612922565b60a0810161296b8288611c51565b6129786020830187611c51565b61298560408301866116f8565b61299260608301856116f8565b818103608083015261279581846117ad56fea264697066735822122099291cffc4cfb0cc0404b39ea937e21b8f3aa048725108215a8f43866020719164736f6c63430008120033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 369,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 375,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 377,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 289,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 188,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 65,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "_owner",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "addressVoted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2185,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "deadlinePeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2187,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "passAmountNeeded",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2192,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "applications",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Application)2170_storage)"
      },
      {
        "astId": 2196,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "tokenIdToCid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2198,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "applicationId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2200,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "isMintReady",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2202,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "applicationIdMinting",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2204,
        "contract": "contracts/Gangabon.sol:Gangabon",
        "label": "tokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(State)2177": {
        "encoding": "inplace",
        "label": "enum Gangabon.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Application)2170_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gangabon.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)2170_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)2170_storage": {
        "encoding": "inplace",
        "label": "struct Gangabon.Application",
        "members": [
          {
            "astId": 2152,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2154,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2156,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "cid",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2158,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "company",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2160,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2162,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "totalVote",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2164,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "yay",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2166,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "nay",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2169,
            "contract": "contracts/Gangabon.sol:Gangabon",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(State)2177"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}